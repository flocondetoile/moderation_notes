<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_entity_view_alter().
 */
function moderation_notes_entity_view_alter(&$build, EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if (!_moderation_notes_access($entity)) {
    return;
  }

  // Load notes for this entity.
  $ids = \Drupal::entityQuery('moderation_note')
    ->condition('entity_type', $entity->getEntityTypeId())
    ->condition('entity_id', $entity->id())
    ->execute();
  /** @var \Drupal\moderation_notes\ModerationNoteInterface[] $notes */
  $notes = \Drupal::entityTypeManager()->getStorage('moderation_note')->loadMultiple($ids);
  foreach ($notes as $note) {
    $setting = [
      'field_id' => $note->getModeratedEntityTypeId() . '/' . $note->getModeratedEntityId() . '/' . $note->getEntityFieldName() . '/' . $note->getEntityLanguage() . '/' . $note->getEntityViewModeId(),
      'text' => $note->getText(),
      'quote' => $note->getQuote(),
      'quote_offset' => $note->getQuoteOffset(),
      'user' => $note->getOwner()->label(),
    ];
    $build['#attached']['drupalSettings']['moderation_notes'][$note->id()] = $setting;
  }
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 */
function moderation_notes_preprocess_field(&$variables) {
  $variables['#cache']['contexts'][] = 'user.permissions';

  $element = $variables['element'];
  /** @var $entity \Drupal\Core\Entity\EntityInterface */
  $entity = $element['#object'];

  if (!_moderation_notes_access($entity)) {
    return;
  }

  $definition = $entity->getFieldDefinition($element['#field_name']);
  if (!$definition->isComputed()) {
    $variables['#attached']['library'][] = 'moderation_notes/main';
    $variables['attributes']['data-moderation-notes-field-id'] = $entity->getEntityTypeId() . '/' . $entity->id() . '/' . $element['#field_name'] . '/' . $element['#language'] . '/' . $element['#view_mode'];
  }
}

/**
 * Access callback to determine if an Entity can be annotated.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The Entity to check.
 *
 * @return bool
 *   TRUE if the current user can access the Entity, FALSE otherwise.
 */
function _moderation_notes_access(EntityInterface $entity) {
  /** @var \Drupal\content_moderation\ModerationInformation $moderation_information */
  $moderation_information = \Drupal::service('content_moderation.moderation_information');

  // Check if this is the latest moderated revision and if the user has access.
  return \Drupal::currentUser()->hasPermission('access moderation notes')
  && $moderation_information->isModeratedEntity($entity)
  && $moderation_information->isLatestRevision($entity)
  && !$entity->isNew();
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function moderation_notes_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  /** @var \Drupal\content_moderation\ModerationInformation $moderation_information */
  $moderation_information = \Drupal::service('content_moderation.moderation_information');

  if ($moderation_information->shouldModerateEntitiesOfBundle($entity_type, $bundle) && !empty($fields['moderation_state'])) {
    $fields['moderation_state']->addConstraint('ModerationNotes', []);
  }
}
